{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_CLIENT","axios","create","baseURL","timeout","App","state","predictions","brandPredictions","imgSrc","event","preventDefault","targetFile","dataTransfer","files","reader","FileReader","readAsDataURL","onloadend","setState","result","data","FormData","append","post","headers","type","then","response","catch","error","console","log","ImagePreview","this","src","alt","Predictions","forEach","item","index","push","key","className","onDragOver","_onDragOver","onDragLeave","_onDragLeave","onDrop","_onDrop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mRAKMA,E,OAAaC,EAAMC,OAAO,CAC1BC,QAFe,uBAGfC,QAAS,MA+DAC,E,2MA1DXC,MAAQ,CACJC,YAAa,CACTC,iBAAkB,IAEtBC,OAAQ,I,2EAGAC,GAAQA,EAAMC,mB,mCACbD,GAAQA,EAAMC,mB,8BAEnBD,GAAQ,IAAD,OACXA,EAAOC,iBACP,IAAIC,EAAaF,EAAMG,aAAaC,MAAM,GACtCC,EAAS,IAAIC,WACjBD,EAAOE,cAAcL,GAErBG,EAAOG,UAAY,SAACR,GAAW,EAAKS,SAAS,CAACV,OAAQM,EAAOK,UAC7D,IAAIC,EAAO,IAAIC,SACfD,EAAKE,OAAO,QAASX,GACrBZ,EAAWwB,KAAK,YAAaH,EAAM,CAACI,QAAS,CAAC,eAAgBb,EAAWc,QACpEC,MAAK,SAACC,GAAc,EAAKT,SAAS,CAACZ,YAAaqB,EAASP,UACzDQ,OAAM,SAACC,GAAWC,QAAQC,IAAIF,Q,+BAG7B,IAEFG,EAFC,OAKFC,KAAK5B,MAAMG,SAEVwB,EAAgB,yBAAKE,IAAKD,KAAK5B,MAAMG,OAAQ2B,IAAK,sBAGtD,IAAIC,EAAa,GAOjB,OANAH,KAAK5B,MAAMC,YAAYC,iBAAiB8B,SAAQ,SAACC,EAAMC,GACnDH,EAAYI,KACR,uBAAGC,IAAG,eAAYF,IAAUD,EAAK,GAAjC,MAAwCA,EAAK,QAKjD,yBAAKI,UAAU,OACX,yBAAKA,UAAU,gBACfC,WAAY,SAAClC,GAAW,EAAKmC,YAAYnC,IACzCoC,YAAa,SAACpC,GAAU,EAAKqC,aAAarC,IAC1CsC,OAAQ,SAACtC,GAAW,EAAKuC,QAAQvC,KAC5BuB,GAGL,yBAAQU,UAAU,eACbN,Q,GArDHa,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoC,c","file":"static/js/main.0115ae6f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst API_ENDPOINT = \"http://54.229.24.97/\"\nconst API_CLIENT = axios.create({\n      baseURL: API_ENDPOINT,\n      timeout: 10000\n    })\n\nclass App extends React.Component {\n\n    state = {\n        predictions: {\n            brandPredictions: []\n        },\n        imgSrc: \"\"\n    } // initialise the imgSrc to blank rather tha null\n\n    _onDragOver(event) {event.preventDefault()}  // override the default evebns\n    _onDragLeave(event) {event.preventDefault()}\n\n    _onDrop(event) {\n        event. preventDefault()\n        var targetFile = event.dataTransfer.files[0]\n        var reader = new FileReader()\n        reader.readAsDataURL(targetFile)\n        // put the target image as the background once dropped\n        reader.onloadend = (event) => {this.setState({imgSrc: reader.result})}\n        var data = new FormData()\n        data.append('image', targetFile)\n        API_CLIENT.post('/classify', data, {headers: {\"Content-Type\": targetFile.type}})\n            .then((response) => {this.setState({predictions: response.data}) })\n            .catch((error) => {console.log(error)})  // post request to send the image\n    }\n\n    render() {\n\n        var ImagePreview\n\n\n        if(this.state.imgSrc)\n        {\n            ImagePreview = (<img src={this.state.imgSrc} alt =\"image-of-a-watch\" />)\n        }\n\n        var Predictions =[]\n        this.state.predictions.brandPredictions.forEach((item, index) => {\n            Predictions.push(\n                <p key = {`item-${index}`}>{item[0]} : {item[1]}</p>\n            )\n        })\n\n        return (\n            <div className=\"App\">\n                <div className='file-dropzone'\n                onDragOver={(event) => {this._onDragOver(event)}}\n                onDragLeave={(event) =>{this._onDragLeave(event)}}\n                onDrop={(event) => {this._onDrop(event)}}>\n                    {ImagePreview}\n                </div>\n\n                <div    className='predictions'>\n                    {Predictions}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}